/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ChainlogInterface extends utils.Interface {
  functions: {
    "count()": FunctionFragment;
    "deny(address)": FunctionFragment;
    "get(uint256)": FunctionFragment;
    "getAddress(bytes32)": FunctionFragment;
    "ipfs()": FunctionFragment;
    "keys(uint256)": FunctionFragment;
    "list()": FunctionFragment;
    "rely(address)": FunctionFragment;
    "removeAddress(bytes32)": FunctionFragment;
    "setAddress(bytes32,address)": FunctionFragment;
    "setIPFS(string)": FunctionFragment;
    "setSha256sum(string)": FunctionFragment;
    "setVersion(string)": FunctionFragment;
    "sha256sum()": FunctionFragment;
    "version()": FunctionFragment;
    "wards(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "count"
      | "deny"
      | "get"
      | "getAddress"
      | "ipfs"
      | "keys"
      | "list"
      | "rely"
      | "removeAddress"
      | "setAddress"
      | "setIPFS"
      | "setSha256sum"
      | "setVersion"
      | "sha256sum"
      | "version"
      | "wards"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deny",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "get",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "ipfs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "keys",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "list", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rely",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIPFS",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSha256sum",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVersion",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "sha256sum", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wards",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ipfs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setIPFS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSha256sum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sha256sum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;

  events: {
    "Deny(address)": EventFragment;
    "Rely(address)": EventFragment;
    "RemoveAddress(bytes32)": EventFragment;
    "UpdateAddress(bytes32,address)": EventFragment;
    "UpdateIPFS(string)": EventFragment;
    "UpdateSha256sum(string)": EventFragment;
    "UpdateVersion(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deny"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rely"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateIPFS"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSha256sum"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateVersion"): EventFragment;
}

export interface DenyEventObject {
  usr: string;
}
export type DenyEvent = TypedEvent<[string], DenyEventObject>;

export type DenyEventFilter = TypedEventFilter<DenyEvent>;

export interface RelyEventObject {
  usr: string;
}
export type RelyEvent = TypedEvent<[string], RelyEventObject>;

export type RelyEventFilter = TypedEventFilter<RelyEvent>;

export interface RemoveAddressEventObject {
  key: string;
}
export type RemoveAddressEvent = TypedEvent<[string], RemoveAddressEventObject>;

export type RemoveAddressEventFilter = TypedEventFilter<RemoveAddressEvent>;

export interface UpdateAddressEventObject {
  key: string;
  addr: string;
}
export type UpdateAddressEvent = TypedEvent<
  [string, string],
  UpdateAddressEventObject
>;

export type UpdateAddressEventFilter = TypedEventFilter<UpdateAddressEvent>;

export interface UpdateIPFSEventObject {
  ipfs: string;
}
export type UpdateIPFSEvent = TypedEvent<[string], UpdateIPFSEventObject>;

export type UpdateIPFSEventFilter = TypedEventFilter<UpdateIPFSEvent>;

export interface UpdateSha256sumEventObject {
  sha256sum: string;
}
export type UpdateSha256sumEvent = TypedEvent<
  [string],
  UpdateSha256sumEventObject
>;

export type UpdateSha256sumEventFilter = TypedEventFilter<UpdateSha256sumEvent>;

export interface UpdateVersionEventObject {
  version: string;
}
export type UpdateVersionEvent = TypedEvent<[string], UpdateVersionEventObject>;

export type UpdateVersionEventFilter = TypedEventFilter<UpdateVersionEvent>;

export interface Chainlog extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChainlogInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    deny(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    get(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getAddress(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { addr: string }>;

    ipfs(overrides?: CallOverrides): Promise<[string]>;

    keys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    list(overrides?: CallOverrides): Promise<[string[]]>;

    rely(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAddress(
      _key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddress(
      _key: PromiseOrValue<BytesLike>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIPFS(
      _ipfs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSha256sum(
      _sha256sum: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVersion(
      _version: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sha256sum(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    wards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  count(overrides?: CallOverrides): Promise<BigNumber>;

  deny(
    usr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  get(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  getAddress(
    _key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  ipfs(overrides?: CallOverrides): Promise<string>;

  keys(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  list(overrides?: CallOverrides): Promise<string[]>;

  rely(
    usr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAddress(
    _key: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddress(
    _key: PromiseOrValue<BytesLike>,
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIPFS(
    _ipfs: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSha256sum(
    _sha256sum: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVersion(
    _version: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sha256sum(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<string>;

  wards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    count(overrides?: CallOverrides): Promise<BigNumber>;

    deny(usr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    get(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getAddress(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    ipfs(overrides?: CallOverrides): Promise<string>;

    keys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    list(overrides?: CallOverrides): Promise<string[]>;

    rely(usr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    removeAddress(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddress(
      _key: PromiseOrValue<BytesLike>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIPFS(
      _ipfs: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSha256sum(
      _sha256sum: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVersion(
      _version: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sha256sum(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<string>;

    wards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Deny(address)"(usr?: null): DenyEventFilter;
    Deny(usr?: null): DenyEventFilter;

    "Rely(address)"(usr?: null): RelyEventFilter;
    Rely(usr?: null): RelyEventFilter;

    "RemoveAddress(bytes32)"(key?: null): RemoveAddressEventFilter;
    RemoveAddress(key?: null): RemoveAddressEventFilter;

    "UpdateAddress(bytes32,address)"(
      key?: null,
      addr?: null
    ): UpdateAddressEventFilter;
    UpdateAddress(key?: null, addr?: null): UpdateAddressEventFilter;

    "UpdateIPFS(string)"(ipfs?: null): UpdateIPFSEventFilter;
    UpdateIPFS(ipfs?: null): UpdateIPFSEventFilter;

    "UpdateSha256sum(string)"(sha256sum?: null): UpdateSha256sumEventFilter;
    UpdateSha256sum(sha256sum?: null): UpdateSha256sumEventFilter;

    "UpdateVersion(string)"(version?: null): UpdateVersionEventFilter;
    UpdateVersion(version?: null): UpdateVersionEventFilter;
  };

  estimateGas: {
    count(overrides?: CallOverrides): Promise<BigNumber>;

    deny(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    get(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddress(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ipfs(overrides?: CallOverrides): Promise<BigNumber>;

    keys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    list(overrides?: CallOverrides): Promise<BigNumber>;

    rely(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAddress(
      _key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddress(
      _key: PromiseOrValue<BytesLike>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIPFS(
      _ipfs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSha256sum(
      _sha256sum: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVersion(
      _version: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sha256sum(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    wards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deny(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    get(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddress(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ipfs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    list(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rely(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAddress(
      _key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddress(
      _key: PromiseOrValue<BytesLike>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIPFS(
      _ipfs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSha256sum(
      _sha256sum: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVersion(
      _version: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sha256sum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
