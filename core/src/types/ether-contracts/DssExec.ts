/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface DssExecInterface extends utils.Interface {
  functions: {
    "action()": FunctionFragment;
    "cast()": FunctionFragment;
    "description()": FunctionFragment;
    "done()": FunctionFragment;
    "eta()": FunctionFragment;
    "expiration()": FunctionFragment;
    "log()": FunctionFragment;
    "nextCastTime()": FunctionFragment;
    "officeHours()": FunctionFragment;
    "pause()": FunctionFragment;
    "schedule()": FunctionFragment;
    "sig()": FunctionFragment;
    "tag()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "action"
      | "cast"
      | "description"
      | "done"
      | "eta"
      | "expiration"
      | "log"
      | "nextCastTime"
      | "officeHours"
      | "pause"
      | "schedule"
      | "sig"
      | "tag"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "action", values?: undefined): string;
  encodeFunctionData(functionFragment: "cast", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "done", values?: undefined): string;
  encodeFunctionData(functionFragment: "eta", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "expiration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "log", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextCastTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "officeHours",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "schedule", values?: undefined): string;
  encodeFunctionData(functionFragment: "sig", values?: undefined): string;
  encodeFunctionData(functionFragment: "tag", values?: undefined): string;

  decodeFunctionResult(functionFragment: "action", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cast", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "done", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eta", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "log", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextCastTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "officeHours",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "schedule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tag", data: BytesLike): Result;

  events: {};
}

export interface DssExec extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DssExecInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    action(overrides?: CallOverrides): Promise<[string]>;

    cast(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    description(overrides?: CallOverrides): Promise<[string]>;

    done(overrides?: CallOverrides): Promise<[boolean]>;

    eta(overrides?: CallOverrides): Promise<[BigNumber]>;

    expiration(overrides?: CallOverrides): Promise<[BigNumber]>;

    log(overrides?: CallOverrides): Promise<[string]>;

    nextCastTime(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { castTime: BigNumber }>;

    officeHours(overrides?: CallOverrides): Promise<[boolean]>;

    pause(overrides?: CallOverrides): Promise<[string]>;

    schedule(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sig(overrides?: CallOverrides): Promise<[string]>;

    tag(overrides?: CallOverrides): Promise<[string]>;
  };

  action(overrides?: CallOverrides): Promise<string>;

  cast(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  description(overrides?: CallOverrides): Promise<string>;

  done(overrides?: CallOverrides): Promise<boolean>;

  eta(overrides?: CallOverrides): Promise<BigNumber>;

  expiration(overrides?: CallOverrides): Promise<BigNumber>;

  log(overrides?: CallOverrides): Promise<string>;

  nextCastTime(overrides?: CallOverrides): Promise<BigNumber>;

  officeHours(overrides?: CallOverrides): Promise<boolean>;

  pause(overrides?: CallOverrides): Promise<string>;

  schedule(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sig(overrides?: CallOverrides): Promise<string>;

  tag(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    action(overrides?: CallOverrides): Promise<string>;

    cast(overrides?: CallOverrides): Promise<void>;

    description(overrides?: CallOverrides): Promise<string>;

    done(overrides?: CallOverrides): Promise<boolean>;

    eta(overrides?: CallOverrides): Promise<BigNumber>;

    expiration(overrides?: CallOverrides): Promise<BigNumber>;

    log(overrides?: CallOverrides): Promise<string>;

    nextCastTime(overrides?: CallOverrides): Promise<BigNumber>;

    officeHours(overrides?: CallOverrides): Promise<boolean>;

    pause(overrides?: CallOverrides): Promise<string>;

    schedule(overrides?: CallOverrides): Promise<void>;

    sig(overrides?: CallOverrides): Promise<string>;

    tag(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    action(overrides?: CallOverrides): Promise<BigNumber>;

    cast(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    done(overrides?: CallOverrides): Promise<BigNumber>;

    eta(overrides?: CallOverrides): Promise<BigNumber>;

    expiration(overrides?: CallOverrides): Promise<BigNumber>;

    log(overrides?: CallOverrides): Promise<BigNumber>;

    nextCastTime(overrides?: CallOverrides): Promise<BigNumber>;

    officeHours(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<BigNumber>;

    schedule(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sig(overrides?: CallOverrides): Promise<BigNumber>;

    tag(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    action(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cast(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    done(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expiration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    log(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextCastTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    officeHours(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    schedule(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tag(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
